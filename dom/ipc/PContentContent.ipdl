/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set ts=2 et sw=2 tw=80: */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

include protocol PBlob;
include protocol PBrowser;
include protocol PContent;
include protocol PContentBridge;
include protocol PJavaScript;

include DOMTypes;
include JavaScriptTypes;
include PTabContext;

using class IPC::Principal from "mozilla/dom/PermissionMessageUtils.h";

namespace mozilla {
namespace dom {

intr protocol PContentContent
{
  manager PContent or PContentBridge;

  manages PBlob;
  manages PBrowser;
  manages PJavaScript;

parent:
  sync SyncMessage(nsString aMessage, ClonedMessageData aData,
                   CpowEntry[] aCpows, Principal aPrincipal)
    returns (nsString[] retval);

  rpc RpcMessage(nsString aMessage, ClonedMessageData aData,
                 CpowEntry[] aCpows, Principal aPrincipal)
    returns (nsString[] retval);

  async PJavaScript();

both:
  // Depending on exactly how the new browser is being created, it might be
  // created from either the child or parent process!
  //
  // The child creates the PBrowser as part of
  // TabChild::BrowserFrameProvideWindow (which happens when the child's
  // content calls window.open()), and the parent creates the PBrowser as part
  // of ContentParent::CreateBrowserOrApp.
  //
  // When the parent constructs a PBrowser, the child trusts the app token it
  // receives from the parent.  In that case, context can be any of the
  // IPCTabContext subtypes.
  //
  // When the child constructs a PBrowser, the parent doesn't trust the app
  // token it receives from the child.  In this case, context must have type
  // PopupIPCTabContext.  The browser created using a PopupIPCTabContext has
  // the opener PBrowser's app-id and containing-app-id.  The parent checks
  // that if the opener is a browser element, the context is also for a
  // browser element.
  //
  // This allows the parent to prevent a malicious child from escalating its
  // privileges by requesting a PBrowser corresponding to a highly-privileged
  // app; the child can only request privileges for an app which the child has
  // access to (in the form of a TabChild).
  //
  // Keep the last 3 attributes in sync with GetProcessAttributes!
  async PBrowser(IPCTabContext context, uint32_t chromeFlags,
                 uint64_t id, bool isForApp, bool isForBrowser);

  async PBlob(BlobConstructorParams params);

  AsyncMessage(nsString aMessage, ClonedMessageData aData,
               CpowEntry[] aCpows, Principal aPrincipal);

child:
  async __delete__();
};

}
}
